h1.  HaCK teh PLaNET

I live in a cooperative with 8 other people.  We share a Netflix queue. The only rule is

bq. Movies cannot be removed from the queue

We currently have 250 movies in our queue, down from 450 a year ago. Queue ordering is crucial.

I used to think the same social etiquette governing our real life interactions was at play on the queue. It turns out that if you want any hope of viewing a movie before you move out you had better move it to the #1 position. Constantly.

I wrote this script to monitor our Netflix queue and ensure that the movie I want to watch is still #1. It runs automatically every 10 minutes.

The script has places of goodness and places of hackery. Maybe you'll find it useful. (I can only hope we don't actually live together, of course)

In an ideal system, one that poses far larger distractions than I can afford right now, this script would become an honest web app that sits on top of our Netflix queue and permits each housemate to spend limited points managing the queue. Maybe after that house meeting where we agree to clear the queue. Or maybe the current situation is exactly how we like it.
 
h2. Features
 
The script allows you to specify your own private queue of movies. It keeps the top movie in your private queue at the top of the Netflix queue.

When your movie ships it is removed from your private queue, as well. This means that I expect to get my top picks 1/3 of the time, assuming I have a long private queue and we return our 3 discs at the same time. (Both of these happen to be false right now.)

Movies can be flagged as "ok to watch again," which will permit or prevent movies already in the rental history from being added to the queue. 

When your private #1 movie's status changes, an email is sent to the PRIVATE_EMAIL_RECIPIENTS list. When your #1 movie ships, a "y0Uve b33n p4wnd bY #1 F!rs1 in 1!ne" is sent to the PUBLIC_EMAIL_RECIPIENTS list. I want to give my housemates a chance to fight back.

Logs are written to a file, "the_log", in the same directory as this code.

h2. Dependencies

h3. django

Django conveniently has simplejson and a nice send_mail interface. eit.

http://djangoproject.com

h2. Included External Libs

h3. oauth

python2.5 does not come with oauth, hence oauth.py is included

h3. pyflix

Netflix.py comes from the pyflix project

http://code.google.com/p/pyflix/

h2. Instruction for Installation and Running

h3. Checkout code from git repository

http://github.com/diN0bot/H-cK-teh-P-4N37-N-TF-1X--1/

h3. Get a NetFlix developer account

http://developer.netflix.com/docs/REST_API_Conventions#0_37461 

h3. Create two files inside repo directory:

*settings.py*

Past the following code into settings.py and specify the APP_NAME, API_KEY and API_SECRET appropriate for your developer account.

pre.. 
APP_NAME   = ''
API_KEY    = ''
API_SECRET = ''
CALLBACK   = ''

USER = {
        'request': {
                'key': '',
                'secret': ''
        },
        'access': {
                'key': '',
                'secret': ''
        }
}

PUBLIC_EMAIL_RECIPIENTS = ["abc@abc.abc",
                           "def@def.def"]

PRIVATE_EMAIL_RECIPIENTS = ["ghi@ghi.ghi"]

# directory containing this file
PROJECT_HOME= ""

# logs are written to PROJECT_HOME/the_log

p. *movies_i_want_to_watch*

List the titles of movies you want to watch, one title per line. For example

pre..

Hackers
Pulp Fiction
Oliver!

h3. Run generate_user_keys.py

The generate_user_keys script generates settings.USER request and access values. Follow the instructions it provides.

bq. python generate_user_keys.py



